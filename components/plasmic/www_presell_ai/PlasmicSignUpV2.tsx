// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hgYa2chxELsjCrsDiarb3T
// Component: T64UjHkK2R
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: whnP1U9nG_tYGg/component
import Button from "../../Button"; // plasmic-import: CnJoQKF1JUjMXv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_www_presell_ai.module.css"; // plasmic-import: hgYa2chxELsjCrsDiarb3T/projectcss
import sty from "./PlasmicSignUpV2.module.css"; // plasmic-import: T64UjHkK2R/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: Yq9TX85itfl8Tl/icon
import Searchsvg2Icon from "./icons/PlasmicIcon__Searchsvg2"; // plasmic-import: GqlQDoqakuGAAn/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q1JO1GFRPkcbBU/icon

export type PlasmicSignUpV2__VariantMembers = {};
export type PlasmicSignUpV2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignUpV2__VariantsArgs;
export const PlasmicSignUpV2__VariantProps = new Array<VariantPropType>();

export type PlasmicSignUpV2__ArgsType = {};
type ArgPropType = keyof PlasmicSignUpV2__ArgsType;
export const PlasmicSignUpV2__ArgProps = new Array<ArgPropType>();

export type PlasmicSignUpV2__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  form?: p.Flex<"form">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultSignUpV2Props {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSignUpV2__RenderFunc(props: {
  variants: PlasmicSignUpV2__VariantsArgs;
  args: PlasmicSignUpV2__ArgsType;
  overrides: PlasmicSignUpV2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSignUpV2.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSignUpV2.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSignUpV2.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kwat2)}>
            <div className={classNames(projectcss.all, sty.columns__enP5J)}>
              <div className={classNames(projectcss.all, sty.column__tu8Ue)} />

              <div className={classNames(projectcss.all, sty.column__oqBot)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j4Jye)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8O3I
                      )}
                    >
                      {"Log In"}
                    </div>

                    <ChevronRightIcon
                      className={classNames(projectcss.all, sty.svg__zOwu5)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__tgOne)}>
              <div className={classNames(projectcss.all, sty.columns___4Fc5G)}>
                <div className={classNames(projectcss.all, sty.column__d4TXj)}>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__jUmuv)}>
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tfG2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u1Un
                        )}
                      >
                        {"Enter some text"}
                      </div>

                      <ChevronRightIcon
                        className={classNames(projectcss.all, sty.svg__qWh8F)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__tmw3)}>
                <div className={classNames(projectcss.all, sty.freeBox__lvjS)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wD9Au
                    )}
                  >
                    {"Enter some text"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4TDc4
                    )}
                  >
                    {"Enter some text"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__k6Ti7)}
                  >
                    <form
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      className={classNames(projectcss.all, sty.form)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kLvcv
                        )}
                      >
                        {"Enter some text"}
                      </div>

                      <TextInput
                        className={classNames(
                          "__wab_instance",
                          sty.textInput__jaPvp
                        )}
                      />

                      <TextInput
                        className={classNames(
                          "__wab_instance",
                          sty.textInput__oDgFb
                        )}
                      />

                      <Button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                      />
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "form", "button"],
  img: ["img"],
  form: ["form", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  form: "form";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignUpV2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignUpV2__VariantsArgs;
    args?: PlasmicSignUpV2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignUpV2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignUpV2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignUpV2__ArgProps,
          internalVariantPropNames: PlasmicSignUpV2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSignUpV2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpV2";
  } else {
    func.displayName = `PlasmicSignUpV2.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpV2 = Object.assign(
  // Top-level PlasmicSignUpV2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    form: makeNodeComponent("form"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSignUpV2
    internalVariantProps: PlasmicSignUpV2__VariantProps,
    internalArgProps: PlasmicSignUpV2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Signup ",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignUpV2;
/* prettier-ignore-end */
