// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hgYa2chxELsjCrsDiarb3T
// Component: HWv9N8v_UP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_www_presell_ai.module.css"; // plasmic-import: hgYa2chxELsjCrsDiarb3T/projectcss
import sty from "./PlasmicDocs.module.css"; // plasmic-import: HWv9N8v_UP/css

import Frame4Icon from "./icons/PlasmicIcon__Frame4"; // plasmic-import: OBeYGW_nLM/icon

export type PlasmicDocs__VariantMembers = {};
export type PlasmicDocs__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocs__VariantsArgs;
export const PlasmicDocs__VariantProps = new Array<VariantPropType>();

export type PlasmicDocs__ArgsType = {};
type ArgPropType = keyof PlasmicDocs__ArgsType;
export const PlasmicDocs__ArgProps = new Array<ArgPropType>();

export type PlasmicDocs__OverridesType = {
  root?: p.Flex<"div">;
  platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5?: p.Flex<"div">;
  div?: p.Flex<"div">;
  div2?: p.Flex<"div">;
  div3?: p.Flex<"div">;
  div4?: p.Flex<"div">;
  getStarted?: p.Flex<"div">;
  a?: p.Flex<"div">;
  introduction?: p.Flex<"div">;
  overview?: p.Flex<"div">;
  keyConcepts?: p.Flex<"div">;
  nextSteps?: p.Flex<"div">;
  quickstart?: p.Flex<"div">;
  libraries?: p.Flex<"div">;
  models?: p.Flex<"div">;
  tutorials?: p.Flex<"div">;
  usagePolicies?: p.Flex<"div">;
  div5?: p.Flex<"div">;
  guides?: p.Flex<"div">;
  textCompletion?: p.Flex<"div">;
  codeCompletion?: p.Flex<"div">;
  imageGeneration?: p.Flex<"div">;
  fineTuning?: p.Flex<"div">;
  embeddings?: p.Flex<"div">;
  moderation?: p.Flex<"div">;
  rateLimits?: p.Flex<"div">;
  errorCodes?: p.Flex<"div">;
  safetyBestPractices?: p.Flex<"div">;
  productionBestPractices?: p.Flex<"div">;
  div6?: p.Flex<"div">;
  apiReference?: p.Flex<"div">;
  introduction2?: p.Flex<"div">;
  div7?: p.Flex<"div">;
  div8?: p.Flex<"div">;
  introduction3?: p.Flex<"div">;
  overview2?: p.Flex<"div">;
  theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification?: p.Flex<"div">;
  keyConcepts2?: p.Flex<"div">;
  weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample?: p.Flex<"div">;
  div9?: p.Flex<"div">;
  div10?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  div11?: p.Flex<"div">;
  div12?: p.Flex<"div">;
  promptsAndCompletions?: p.Flex<"div">;
  theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop?: p.Flex<"div">;
  designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore?: p.Flex<"div">;
};

export interface DefaultDocsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDocs__RenderFunc(props: {
  variants: PlasmicDocs__VariantsArgs;
  args: PlasmicDocs__ArgsType;
  overrides: PlasmicDocs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={
              "platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5"
            }
            data-plasmic-override={
              overrides.platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5
            }
            className={classNames(
              projectcss.all,
              sty.platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5
            )}
          >
            <div
              data-plasmic-name={"div"}
              data-plasmic-override={overrides.div}
              className={classNames(projectcss.all, sty.div)}
            >
              <div
                data-plasmic-name={"div2"}
                data-plasmic-override={overrides.div2}
                className={classNames(projectcss.all, sty.div2)}
              >
                <div
                  data-plasmic-name={"div3"}
                  data-plasmic-override={overrides.div3}
                  className={classNames(projectcss.all, sty.div3)}
                >
                  <div
                    data-plasmic-name={"div4"}
                    data-plasmic-override={overrides.div4}
                    className={classNames(projectcss.all, sty.div4)}
                  >
                    <div
                      data-plasmic-name={"getStarted"}
                      data-plasmic-override={overrides.getStarted}
                      className={classNames(projectcss.all, sty.getStarted)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___88OqP
                        )}
                      >
                        {"Get started"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"a"}
                      data-plasmic-override={overrides.a}
                      className={classNames(projectcss.all, sty.a)}
                    >
                      <div
                        data-plasmic-name={"introduction"}
                        data-plasmic-override={overrides.introduction}
                        className={classNames(projectcss.all, sty.introduction)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ocoDy
                          )}
                        >
                          {"Introduction"}
                        </div>
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"overview"}
                      data-plasmic-override={overrides.overview}
                      className={classNames(projectcss.all, sty.overview)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5AC0I
                          )}
                        >
                          {"Overview"}
                        </div>
                      ) : null}
                    </div>

                    {true ? (
                      <div
                        data-plasmic-name={"keyConcepts"}
                        data-plasmic-override={overrides.keyConcepts}
                        className={classNames(projectcss.all, sty.keyConcepts)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lyyqD
                          )}
                        >
                          {"Key concepts"}
                        </div>
                      </div>
                    ) : null}
                    {true ? (
                      <div
                        data-plasmic-name={"nextSteps"}
                        data-plasmic-override={overrides.nextSteps}
                        className={classNames(projectcss.all, sty.nextSteps)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yc9Z
                          )}
                        >
                          {"Next steps"}
                        </div>
                      </div>
                    ) : null}

                    <div
                      data-plasmic-name={"quickstart"}
                      data-plasmic-override={overrides.quickstart}
                      className={classNames(projectcss.all, sty.quickstart)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oEXo
                        )}
                      >
                        {"Quickstart"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"libraries"}
                      data-plasmic-override={overrides.libraries}
                      className={classNames(projectcss.all, sty.libraries)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hjMPo
                        )}
                      >
                        {"Libraries"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"models"}
                      data-plasmic-override={overrides.models}
                      className={classNames(projectcss.all, sty.models)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dSpSg
                        )}
                      >
                        {"Models"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"tutorials"}
                      data-plasmic-override={overrides.tutorials}
                      className={classNames(projectcss.all, sty.tutorials)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gPeOl
                        )}
                      >
                        {"Tutorials"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"usagePolicies"}
                      data-plasmic-override={overrides.usagePolicies}
                      className={classNames(projectcss.all, sty.usagePolicies)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qR97W
                        )}
                      >
                        {"Usage policies"}
                      </div>
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"div5"}
                    data-plasmic-override={overrides.div5}
                    className={classNames(projectcss.all, sty.div5)}
                  >
                    <div
                      data-plasmic-name={"guides"}
                      data-plasmic-override={overrides.guides}
                      className={classNames(projectcss.all, sty.guides)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ujgst
                        )}
                      >
                        {"Guides"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"textCompletion"}
                      data-plasmic-override={overrides.textCompletion}
                      className={classNames(projectcss.all, sty.textCompletion)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g6QNr
                        )}
                      >
                        {"Text completion"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"codeCompletion"}
                      data-plasmic-override={overrides.codeCompletion}
                      className={classNames(projectcss.all, sty.codeCompletion)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mKdt4
                        )}
                      >
                        {"Code completion"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"imageGeneration"}
                      data-plasmic-override={overrides.imageGeneration}
                      className={classNames(
                        projectcss.all,
                        sty.imageGeneration
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sGji
                        )}
                      >
                        {"Image generation"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"fineTuning"}
                      data-plasmic-override={overrides.fineTuning}
                      className={classNames(projectcss.all, sty.fineTuning)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__c1T3C
                        )}
                      >
                        {"Fine-tuning"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"embeddings"}
                      data-plasmic-override={overrides.embeddings}
                      className={classNames(projectcss.all, sty.embeddings)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nDplM
                        )}
                      >
                        {"Embeddings"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"moderation"}
                      data-plasmic-override={overrides.moderation}
                      className={classNames(projectcss.all, sty.moderation)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lkqjv
                        )}
                      >
                        {"Moderation"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"rateLimits"}
                      data-plasmic-override={overrides.rateLimits}
                      className={classNames(projectcss.all, sty.rateLimits)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u8Bo7
                        )}
                      >
                        {"Rate limits"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"errorCodes"}
                      data-plasmic-override={overrides.errorCodes}
                      className={classNames(projectcss.all, sty.errorCodes)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iXxVh
                        )}
                      >
                        {"Error codes"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"safetyBestPractices"}
                      data-plasmic-override={overrides.safetyBestPractices}
                      className={classNames(
                        projectcss.all,
                        sty.safetyBestPractices
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rFl0
                        )}
                      >
                        {"Safety best practices"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"productionBestPractices"}
                      data-plasmic-override={overrides.productionBestPractices}
                      className={classNames(
                        projectcss.all,
                        sty.productionBestPractices
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fmsgj
                        )}
                      >
                        {"Production best practices"}
                      </div>
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"div6"}
                    data-plasmic-override={overrides.div6}
                    className={classNames(projectcss.all, sty.div6)}
                  >
                    <div
                      data-plasmic-name={"apiReference"}
                      data-plasmic-override={overrides.apiReference}
                      className={classNames(projectcss.all, sty.apiReference)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Xh9K
                        )}
                      >
                        {"API Reference"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"introduction2"}
                      data-plasmic-override={overrides.introduction2}
                      className={classNames(projectcss.all, sty.introduction2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jy7Ww
                        )}
                      >
                        {"Introduction"}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div
                data-plasmic-name={"div7"}
                data-plasmic-override={overrides.div7}
                className={classNames(projectcss.all, sty.div7)}
              >
                <div
                  data-plasmic-name={"div8"}
                  data-plasmic-override={overrides.div8}
                  className={classNames(projectcss.all, sty.div8)}
                >
                  <div
                    data-plasmic-name={"introduction3"}
                    data-plasmic-override={overrides.introduction3}
                    className={classNames(projectcss.all, sty.introduction3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x8Od2
                      )}
                    >
                      {"Introduction"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"overview2"}
                    data-plasmic-override={overrides.overview2}
                    className={classNames(projectcss.all, sty.overview2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hsUe2
                      )}
                    >
                      {"Overview"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={
                      "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification"
                    }
                    data-plasmic-override={
                      overrides.theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification
                    }
                    className={classNames(
                      projectcss.all,
                      sty.theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uc66V
                      )}
                    >
                      {
                        "The OpenAI API can be applied to virtually any task that involves understanding or generating natural language or code. We offer a spectrum of models with different levels of power suitable for different tasks, as well as the ability to fine-tune your own custom models. These models can be used for everything from content generation to semantic search and classification."
                      }
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"keyConcepts2"}
                    data-plasmic-override={overrides.keyConcepts2}
                    className={classNames(projectcss.all, sty.keyConcepts2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3QVq3
                      )}
                    >
                      {"Key concepts"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={
                      "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample"
                    }
                    data-plasmic-override={
                      overrides.weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample
                    }
                    className={classNames(
                      projectcss.all,
                      sty.weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rdi5Q
                      )}
                    >
                      {
                        "We recommend completing our quickstart tutorial to get acquainted with key concepts through a hands-on, interactive example."
                      }
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"div9"}
                    data-plasmic-override={overrides.div9}
                    className={classNames(projectcss.all, sty.div9)}
                  >
                    <div
                      data-plasmic-name={"div10"}
                      data-plasmic-override={overrides.div10}
                      className={classNames(projectcss.all, sty.div10)}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"54px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"54px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/www_presell_ai/images/iconBgBluesvg.bin",
                          fullWidth: 54,
                          fullHeight: 54,
                          aspectRatio: 1
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0Uq3X
                        )}
                      >
                        <Frame4Icon
                          className={classNames(projectcss.all, sty.svg__nPZz)}
                          role={"img"}
                        />
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"div11"}
                      data-plasmic-override={overrides.div11}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.div11)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n43Q
                        )}
                      >
                        {"Quickstart tutorial"}
                      </div>

                      <div
                        data-plasmic-name={"div12"}
                        data-plasmic-override={overrides.div12}
                        className={classNames(projectcss.all, sty.div12)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nDyyH
                          )}
                        >
                          {"Learn by building a quick sample application"}
                        </div>
                      </div>
                    </p.Stack>
                  </div>

                  <div
                    data-plasmic-name={"promptsAndCompletions"}
                    data-plasmic-override={overrides.promptsAndCompletions}
                    className={classNames(
                      projectcss.all,
                      sty.promptsAndCompletions
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Np98
                      )}
                    >
                      {"Prompts and completions"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={
                      "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop"
                    }
                    data-plasmic-override={
                      overrides.theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop
                    }
                    className={classNames(
                      projectcss.all,
                      sty.theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bhPk
                      )}
                    >
                      {
                        "The completions endpoint is at the center of our API. It provides a simple interface to our models that is extremely flexible and powerful. You input some text as a prompt, and the model will generate a text completion that attempts to match whatever context or pattern you gave it. For example, if you give the API the prompt, “Write a tagline for an ice cream shop”, it will return a completion like “We serve up smiles with every scoop!”"
                      }
                    </div>
                  </div>

                  <div
                    data-plasmic-name={
                      "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
                    }
                    data-plasmic-override={
                      overrides.designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore
                    }
                    className={classNames(
                      projectcss.all,
                      sty.designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bJvRb
                      )}
                    >
                      {
                        "Designing your prompt is essentially how you “program” the model, usually by providing some instructions or a few examples. This is different from most other NLP services which are designed for a single task, such as sentiment classification or named entity recognition. Instead, the completions endpoint can be used for virtually any task including content or code generation, summarization, expansion, conversation, creative writing, style transfer, and more."
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5",
    "div",
    "div2",
    "div3",
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies",
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices",
    "div6",
    "apiReference",
    "introduction2",
    "div7",
    "div8",
    "introduction3",
    "overview2",
    "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification",
    "keyConcepts2",
    "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample",
    "div9",
    "div10",
    "img",
    "div11",
    "div12",
    "promptsAndCompletions",
    "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop",
    "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
  ],
  platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5: [
    "platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5",
    "div",
    "div2",
    "div3",
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies",
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices",
    "div6",
    "apiReference",
    "introduction2",
    "div7",
    "div8",
    "introduction3",
    "overview2",
    "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification",
    "keyConcepts2",
    "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample",
    "div9",
    "div10",
    "img",
    "div11",
    "div12",
    "promptsAndCompletions",
    "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop",
    "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
  ],
  div: [
    "div",
    "div2",
    "div3",
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies",
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices",
    "div6",
    "apiReference",
    "introduction2",
    "div7",
    "div8",
    "introduction3",
    "overview2",
    "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification",
    "keyConcepts2",
    "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample",
    "div9",
    "div10",
    "img",
    "div11",
    "div12",
    "promptsAndCompletions",
    "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop",
    "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
  ],
  div2: [
    "div2",
    "div3",
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies",
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices",
    "div6",
    "apiReference",
    "introduction2"
  ],
  div3: [
    "div3",
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies",
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices",
    "div6",
    "apiReference",
    "introduction2"
  ],
  div4: [
    "div4",
    "getStarted",
    "a",
    "introduction",
    "overview",
    "keyConcepts",
    "nextSteps",
    "quickstart",
    "libraries",
    "models",
    "tutorials",
    "usagePolicies"
  ],
  getStarted: ["getStarted"],
  a: ["a", "introduction"],
  introduction: ["introduction"],
  overview: ["overview"],
  keyConcepts: ["keyConcepts"],
  nextSteps: ["nextSteps"],
  quickstart: ["quickstart"],
  libraries: ["libraries"],
  models: ["models"],
  tutorials: ["tutorials"],
  usagePolicies: ["usagePolicies"],
  div5: [
    "div5",
    "guides",
    "textCompletion",
    "codeCompletion",
    "imageGeneration",
    "fineTuning",
    "embeddings",
    "moderation",
    "rateLimits",
    "errorCodes",
    "safetyBestPractices",
    "productionBestPractices"
  ],
  guides: ["guides"],
  textCompletion: ["textCompletion"],
  codeCompletion: ["codeCompletion"],
  imageGeneration: ["imageGeneration"],
  fineTuning: ["fineTuning"],
  embeddings: ["embeddings"],
  moderation: ["moderation"],
  rateLimits: ["rateLimits"],
  errorCodes: ["errorCodes"],
  safetyBestPractices: ["safetyBestPractices"],
  productionBestPractices: ["productionBestPractices"],
  div6: ["div6", "apiReference", "introduction2"],
  apiReference: ["apiReference"],
  introduction2: ["introduction2"],
  div7: [
    "div7",
    "div8",
    "introduction3",
    "overview2",
    "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification",
    "keyConcepts2",
    "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample",
    "div9",
    "div10",
    "img",
    "div11",
    "div12",
    "promptsAndCompletions",
    "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop",
    "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
  ],
  div8: [
    "div8",
    "introduction3",
    "overview2",
    "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification",
    "keyConcepts2",
    "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample",
    "div9",
    "div10",
    "img",
    "div11",
    "div12",
    "promptsAndCompletions",
    "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop",
    "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
  ],
  introduction3: ["introduction3"],
  overview2: ["overview2"],
  theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification:
    [
      "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification"
    ],
  keyConcepts2: ["keyConcepts2"],
  weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample:
    [
      "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample"
    ],
  div9: ["div9", "div10", "img", "div11", "div12"],
  div10: ["div10", "img"],
  img: ["img"],
  div11: ["div11", "div12"],
  div12: ["div12"],
  promptsAndCompletions: ["promptsAndCompletions"],
  theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop:
    [
      "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop"
    ],
  designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore:
    [
      "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
    ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5: "div";
  div: "div";
  div2: "div";
  div3: "div";
  div4: "div";
  getStarted: "div";
  a: "div";
  introduction: "div";
  overview: "div";
  keyConcepts: "div";
  nextSteps: "div";
  quickstart: "div";
  libraries: "div";
  models: "div";
  tutorials: "div";
  usagePolicies: "div";
  div5: "div";
  guides: "div";
  textCompletion: "div";
  codeCompletion: "div";
  imageGeneration: "div";
  fineTuning: "div";
  embeddings: "div";
  moderation: "div";
  rateLimits: "div";
  errorCodes: "div";
  safetyBestPractices: "div";
  productionBestPractices: "div";
  div6: "div";
  apiReference: "div";
  introduction2: "div";
  div7: "div";
  div8: "div";
  introduction3: "div";
  overview2: "div";
  theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification: "div";
  keyConcepts2: "div";
  weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample: "div";
  div9: "div";
  div10: "div";
  img: typeof p.PlasmicImg;
  div11: "div";
  div12: "div";
  promptsAndCompletions: "div";
  theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop: "div";
  designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocs__VariantsArgs;
    args?: PlasmicDocs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDocs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDocs__ArgProps,
          internalVariantPropNames: PlasmicDocs__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDocs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocs";
  } else {
    func.displayName = `PlasmicDocs.${nodeName}`;
  }
  return func;
}

export const PlasmicDocs = Object.assign(
  // Top-level PlasmicDocs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5:
      makeNodeComponent(
        "platformopenaicomByHtmltodesignFreeVersion19022023235909Gmt5"
      ),
    div: makeNodeComponent("div"),
    div2: makeNodeComponent("div2"),
    div3: makeNodeComponent("div3"),
    div4: makeNodeComponent("div4"),
    getStarted: makeNodeComponent("getStarted"),
    a: makeNodeComponent("a"),
    introduction: makeNodeComponent("introduction"),
    overview: makeNodeComponent("overview"),
    keyConcepts: makeNodeComponent("keyConcepts"),
    nextSteps: makeNodeComponent("nextSteps"),
    quickstart: makeNodeComponent("quickstart"),
    libraries: makeNodeComponent("libraries"),
    models: makeNodeComponent("models"),
    tutorials: makeNodeComponent("tutorials"),
    usagePolicies: makeNodeComponent("usagePolicies"),
    div5: makeNodeComponent("div5"),
    guides: makeNodeComponent("guides"),
    textCompletion: makeNodeComponent("textCompletion"),
    codeCompletion: makeNodeComponent("codeCompletion"),
    imageGeneration: makeNodeComponent("imageGeneration"),
    fineTuning: makeNodeComponent("fineTuning"),
    embeddings: makeNodeComponent("embeddings"),
    moderation: makeNodeComponent("moderation"),
    rateLimits: makeNodeComponent("rateLimits"),
    errorCodes: makeNodeComponent("errorCodes"),
    safetyBestPractices: makeNodeComponent("safetyBestPractices"),
    productionBestPractices: makeNodeComponent("productionBestPractices"),
    div6: makeNodeComponent("div6"),
    apiReference: makeNodeComponent("apiReference"),
    introduction2: makeNodeComponent("introduction2"),
    div7: makeNodeComponent("div7"),
    div8: makeNodeComponent("div8"),
    introduction3: makeNodeComponent("introduction3"),
    overview2: makeNodeComponent("overview2"),
    theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification:
      makeNodeComponent(
        "theOpenAiApiCanBeAppliedToVirtuallyAnyTaskThatInvolvesUnderstandingOrGeneratingNaturalLanguageOrCodeWeOfferASpectrumOfModelsWithDifferentLevelsOfPowerSuitableForDifferentTasksAsWellAsTheAbilityToFineTuneYourOwnCustomModelsTheseModelsCanBeUsedForEverythingFromContentGenerationToSemanticSearchAndClassification"
      ),
    keyConcepts2: makeNodeComponent("keyConcepts2"),
    weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample:
      makeNodeComponent(
        "weRecommendCompletingOurQuickstartTutorialToGetAcquaintedWithKeyConceptsThroughAHandsOnInteractiveExample"
      ),
    div9: makeNodeComponent("div9"),
    div10: makeNodeComponent("div10"),
    img: makeNodeComponent("img"),
    div11: makeNodeComponent("div11"),
    div12: makeNodeComponent("div12"),
    promptsAndCompletions: makeNodeComponent("promptsAndCompletions"),
    theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop:
      makeNodeComponent(
        "theCompletionsEndpointIsAtTheCenterOfOurApiItProvidesASimpleInterfaceToOurModelsThatIsExtremelyFlexibleAndPowerfulYouInputSomeTextAsAPromptAndTheModelWillGenerateATextCompletionThatAttemptsToMatchWhateverContextOrPatternYouGaveItForExampleIfYouGiveTheApiThePromptWriteATaglineForAnIceCreamShopItWillReturnACompletionLikeWeServeUpSmilesWithEveryScoop"
      ),
    designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore:
      makeNodeComponent(
        "designingYourPromptIsEssentiallyHowYouProgramTheModelUsuallyByProvidingSomeInstructionsOrAFewExamplesThisIsDifferentFromMostOtherNlpServicesWhichAreDesignedForASingleTaskSuchAsSentimentClassificationOrNamedEntityRecognitionInsteadTheCompletionsEndpointCanBeUsedForVirtuallyAnyTaskIncludingContentOrCodeGenerationSummarizationExpansionConversationCreativeWritingStyleTransferAndMore"
      ),

    // Metadata about props expected for PlasmicDocs
    internalVariantProps: PlasmicDocs__VariantProps,
    internalArgProps: PlasmicDocs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDocs;
/* prettier-ignore-end */
