// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hgYa2chxELsjCrsDiarb3T
// Component: HWv9N8v_UP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: 1Ua3Zd0YazUX91/component
import FooterSection from "../../FooterSection"; // plasmic-import: RmQnVGl7OA9pJb/component

import { useScreenVariants as useScreenVariantscvQoPsTOivAmc4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CVQoPsTOivAmc4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_www_presell_ai.module.css"; // plasmic-import: hgYa2chxELsjCrsDiarb3T/projectcss
import sty from "./PlasmicDocs.module.css"; // plasmic-import: HWv9N8v_UP/css

export type PlasmicDocs__VariantMembers = {};
export type PlasmicDocs__VariantsArgs = {};
type VariantPropType = keyof PlasmicDocs__VariantsArgs;
export const PlasmicDocs__VariantProps = new Array<VariantPropType>();

export type PlasmicDocs__ArgsType = {};
type ArgPropType = keyof PlasmicDocs__ArgsType;
export const PlasmicDocs__ArgProps = new Array<ArgPropType>();

export type PlasmicDocs__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  img?: p.Flex<typeof p.PlasmicImg>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultDocsProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDocs__RenderFunc(props: {
  variants: PlasmicDocs__VariantsArgs;
  args: PlasmicDocs__ArgsType;
  overrides: PlasmicDocs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscvQoPsTOivAmc4()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox___2NRd)}>
            <div className={classNames(projectcss.all, sty.columns__qMxX)}>
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.column__dy44N)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y7FAg
                    )}
                  >
                    {"Documentation"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cdcRf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__afOgu
                      )}
                    >
                      {"Introduction"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6UBvl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d2Dc4
                      )}
                    >
                      {"Campaigns "}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zlhf
                      )}
                    >
                      {"Products"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8Tn9O
                      )}
                    >
                      {"Funnels"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rDppO
                      )}
                    >
                      {"Traffic"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dCjHl
                      )}
                    >
                      {"Followup"}
                    </div>
                  </div>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.column__uvFsg)}>
                <div className={classNames(projectcss.all, sty.freeBox__wg8EH)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__frkdp
                    )}
                  >
                    {"Introduction"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ye5Nx
                    )}
                  >
                    {"Overview"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bHgGt
                    )}
                  >
                    {
                      "Presell.AI can be used to amplify growth for virtually any product or service. We offer fine-tuned customer acquisition models for common offerings such as Life Insurance in addition to providing users with the ability to fine-tune their own custom models from scratch in seconds using Generative AI & Prompt Engineering."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r6QKq
                    )}
                  >
                    {"Key Concepts "}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zvIg9
                    )}
                  >
                    {"The platform is "}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.columns__xvQ3K)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__gfuEy)}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? ("80px" as const)
                            : ("60px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobile")
                            ? ("100%" as const)
                            : ("79px" as const)
                        }
                        loading={"lazy" as const}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.column__zMl2Z)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qBdcf
                        )}
                      >
                        {"Quickstart tutorial"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ymOe
                        )}
                      >
                        {
                          "Learn by building a quick sample growth marketing campaign"
                        }
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rTyYw
                    )}
                  >
                    {"Campaign"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r7R7P
                    )}
                  >
                    {
                      "Campaigns are the highest most parent element within Presell.AI. "
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___16Cxb
                    )}
                  >
                    {"Produc†"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__y87TL
                    )}
                  >
                    {
                      "Products are used to populate the assets within Campaigns. "
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t2L7V
                    )}
                  >
                    {"Funnel"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f1OV4
                    )}
                  >
                    {
                      "Funnels are sequentially generated webpages that create a linear path to conversion. "
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__deD6C
                    )}
                  >
                    {"Traffic"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mr91D
                    )}
                  >
                    {
                      "Traffic is paid or organic visitors interacting with individual Funnel webpages"
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nWuJx
                    )}
                  >
                    {"Followup"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tTuS4
                    )}
                  >
                    {
                      "Followups are outbound communications to Funnel visitors."
                    }
                  </div>
                </div>
              </div>
            </div>

            <FooterSection
              data-plasmic-name={"footerSection"}
              data-plasmic-override={overrides.footerSection}
              className={classNames("__wab_instance", sty.footerSection)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "img", "footerSection"],
  navbar: ["navbar"],
  img: ["img"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  img: typeof p.PlasmicImg;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocs__VariantsArgs;
    args?: PlasmicDocs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDocs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDocs__ArgProps,
          internalVariantPropNames: PlasmicDocs__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDocs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocs";
  } else {
    func.displayName = `PlasmicDocs.${nodeName}`;
  }
  return func;
}

export const PlasmicDocs = Object.assign(
  // Top-level PlasmicDocs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    img: makeNodeComponent("img"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicDocs
    internalVariantProps: PlasmicDocs__VariantProps,
    internalArgProps: PlasmicDocs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDocs;
/* prettier-ignore-end */
