// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hgYa2chxELsjCrsDiarb3T
// Component: YlzU-voekL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: 1Ua3Zd0YazUX91/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import Form from "../../Form"; // plasmic-import: T6V8rQtdf7/component
import FooterSection from "../../FooterSection"; // plasmic-import: RmQnVGl7OA9pJb/component

import { useScreenVariants as useScreenVariantscvQoPsTOivAmc4 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: CVQoPsTOivAmc4/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_www_presell_ai.module.css"; // plasmic-import: hgYa2chxELsjCrsDiarb3T/projectcss
import sty from "./PlasmicLearnDynamic.module.css"; // plasmic-import: YlzU-voekL/css

export type PlasmicLearnDynamic__VariantMembers = {};
export type PlasmicLearnDynamic__VariantsArgs = {};
type VariantPropType = keyof PlasmicLearnDynamic__VariantsArgs;
export const PlasmicLearnDynamic__VariantProps = new Array<VariantPropType>();

export type PlasmicLearnDynamic__ArgsType = {};
type ArgPropType = keyof PlasmicLearnDynamic__ArgsType;
export const PlasmicLearnDynamic__ArgProps = new Array<ArgPropType>();

export type PlasmicLearnDynamic__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  httpApiFetcher?: p.Flex<typeof DataFetcher>;
  _1512Px?: p.Flex<"div">;
  divtop?: p.Flex<"div">;
  div?: p.Flex<"div">;
  div2?: p.Flex<"div">;
  div3?: p.Flex<"div">;
  heroH1?: p.Flex<"div">;
  heroP?: p.Flex<"div">;
  heroImage?: p.Flex<"div">;
  _1252Px?: p.Flex<"div">;
  divtop2?: p.Flex<"div">;
  div4?: p.Flex<"div">;
  div5?: p.Flex<"div">;
  div6?: p.Flex<"div">;
  coverpng2?: p.Flex<"div">;
  _594Px?: p.Flex<"div">;
  divtop3?: p.Flex<"div">;
  div7?: p.Flex<"div">;
  div8?: p.Flex<"div">;
  coverpng3?: p.Flex<"div">;
  div9?: p.Flex<"div">;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultLearnDynamicProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLearnDynamic__RenderFunc(props: {
  variants: PlasmicLearnDynamic__VariantsArgs;
  args: PlasmicLearnDynamic__ArgsType;
  overrides: PlasmicLearnDynamic__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscvQoPsTOivAmc4()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <DataFetcher
              data-plasmic-name={"httpApiFetcher"}
              data-plasmic-override={overrides.httpApiFetcher}
              className={classNames("__wab_instance", sty.httpApiFetcher)}
              dataName={"fetchedData" as const}
              errorDisplay={
                <ph.DataCtxReader>
                  {$ctx => "Error fetching data"}
                </ph.DataCtxReader>
              }
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json",
                Authorization: "Bearer keyVDvhyVSx5Ntbl3"
              }}
              loadingDisplay={
                <ph.DataCtxReader>{$ctx => "Loading..."}</ph.DataCtxReader>
              }
              method={"GET" as const}
              noLayout={false}
              url={(() => {
                try {
                  return (
                    "https://api.airtable.com/v0/appmM1mMqcDvugXhY/learn/" +
                    $ctx.params.slug
                  );
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "https://api.airtable.com/v0/appmM1mMqcDvugXhY/learn?slug";
                  }
                  throw e;
                }
              })()}
            >
              <ph.DataCtxReader>
                {$ctx =>
                  (
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : hasVariant(globalVariants, "screen", "footer")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"_1512Px"}
                      data-plasmic-override={overrides._1512Px}
                      className={classNames(projectcss.all, sty._1512Px)}
                    >
                      <div
                        data-plasmic-name={"divtop"}
                        data-plasmic-override={overrides.divtop}
                        className={classNames(projectcss.all, sty.divtop)}
                      >
                        <div
                          data-plasmic-name={"div"}
                          data-plasmic-override={overrides.div}
                          className={classNames(projectcss.all, sty.div)}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"div2"}
                            data-plasmic-override={overrides.div2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.div2)}
                          >
                            <div
                              data-plasmic-name={"div3"}
                              data-plasmic-override={overrides.div3}
                              className={classNames(projectcss.all, sty.div3)}
                            >
                              <div
                                data-plasmic-name={"heroH1"}
                                data-plasmic-override={overrides.heroH1}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heroH1
                                )}
                              >
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.fields["Hero H1"];
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "How to drive more website conversions with Clearbit and Mutiny";
                                    }
                                    throw e;
                                  }
                                })()}
                              </div>

                              <div
                                data-plasmic-name={"heroP"}
                                data-plasmic-override={overrides.heroP}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.heroP
                                )}
                              >
                                {(() => {
                                  try {
                                    return $ctx.fetchedData.fields[
                                      "Hero Paragraph"
                                    ];
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "To help buyers find the perfect fit and capture demand at scale, marketers must create personalized website experiences. Learn how to build and implement a website personalization strategy from the ground up with Clearbit and Mutiny.";
                                    }
                                    throw e;
                                  }
                                })()}
                              </div>

                              <Form
                                className={classNames(
                                  "__wab_instance",
                                  sty.form__ib8JQ
                                )}
                              />
                            </div>

                            <div
                              data-plasmic-name={"heroImage"}
                              data-plasmic-override={overrides.heroImage}
                              className={classNames(
                                projectcss.all,
                                sty.heroImage
                              )}
                            />
                          </p.Stack>
                        </div>
                      </div>
                    </div>
                  ) : null
                }
              </ph.DataCtxReader>
            </DataFetcher>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "footer")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"_1252Px"}
              data-plasmic-override={overrides._1252Px}
              className={classNames(projectcss.all, sty._1252Px)}
            >
              <div
                data-plasmic-name={"divtop2"}
                data-plasmic-override={overrides.divtop2}
                className={classNames(projectcss.all, sty.divtop2)}
              >
                <div
                  data-plasmic-name={"div4"}
                  data-plasmic-override={overrides.div4}
                  className={classNames(projectcss.all, sty.div4)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"div5"}
                    data-plasmic-override={overrides.div5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.div5)}
                  >
                    <div
                      data-plasmic-name={"div6"}
                      data-plasmic-override={overrides.div6}
                      className={classNames(projectcss.all, sty.div6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mbOjx
                        )}
                      >
                        {
                          "How to drive more website conversions with Clearbit and Mutiny"
                        }
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1HsCv
                        )}
                      >
                        {
                          "To help buyers find the perfect fit and capture demand at scale, marketers must create personalized website experiences. Learn how to build and implement a website personalization strategy from the ground up with Clearbit and Mutiny."
                        }
                      </div>

                      <Form
                        className={classNames(
                          "__wab_instance",
                          sty.form__hir60
                        )}
                      />
                    </div>

                    <div
                      data-plasmic-name={"coverpng2"}
                      data-plasmic-override={overrides.coverpng2}
                      className={classNames(projectcss.all, sty.coverpng2)}
                    />
                  </p.Stack>
                </div>
              </div>
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <div
              data-plasmic-name={"_594Px"}
              data-plasmic-override={overrides._594Px}
              className={classNames(projectcss.all, sty._594Px)}
            >
              <div
                data-plasmic-name={"divtop3"}
                data-plasmic-override={overrides.divtop3}
                className={classNames(projectcss.all, sty.divtop3)}
              >
                <div
                  data-plasmic-name={"div7"}
                  data-plasmic-override={overrides.div7}
                  className={classNames(projectcss.all, sty.div7)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"div8"}
                    data-plasmic-override={overrides.div8}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.div8)}
                  >
                    <div
                      data-plasmic-name={"coverpng3"}
                      data-plasmic-override={overrides.coverpng3}
                      className={classNames(projectcss.all, sty.coverpng3)}
                    />

                    <div
                      data-plasmic-name={"div9"}
                      data-plasmic-override={overrides.div9}
                      className={classNames(projectcss.all, sty.div9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pPMf5
                        )}
                      >
                        {
                          "How to drive more website conversions with Clearbit and Mutiny"
                        }
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mCfLn
                        )}
                      >
                        {
                          "To help buyers find the perfect fit and capture demand at scale, marketers must create personalized website experiences. Learn how to build and implement a website personalization strategy from the ground up with Clearbit and Mutiny."
                        }
                      </div>

                      <Form
                        className={classNames(
                          "__wab_instance",
                          sty.form__xHa3F
                        )}
                      />
                    </div>
                  </p.Stack>
                </div>
              </div>
            </div>
          ) : null}

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "navbar",
    "httpApiFetcher",
    "_1512Px",
    "divtop",
    "div",
    "div2",
    "div3",
    "heroH1",
    "heroP",
    "heroImage",
    "_1252Px",
    "divtop2",
    "div4",
    "div5",
    "div6",
    "coverpng2",
    "_594Px",
    "divtop3",
    "div7",
    "div8",
    "coverpng3",
    "div9",
    "footerSection"
  ],
  freeBox: [
    "freeBox",
    "navbar",
    "httpApiFetcher",
    "_1512Px",
    "divtop",
    "div",
    "div2",
    "div3",
    "heroH1",
    "heroP",
    "heroImage"
  ],
  navbar: ["navbar"],
  httpApiFetcher: [
    "httpApiFetcher",
    "_1512Px",
    "divtop",
    "div",
    "div2",
    "div3",
    "heroH1",
    "heroP",
    "heroImage"
  ],
  _1512Px: [
    "_1512Px",
    "divtop",
    "div",
    "div2",
    "div3",
    "heroH1",
    "heroP",
    "heroImage"
  ],
  divtop: ["divtop", "div", "div2", "div3", "heroH1", "heroP", "heroImage"],
  div: ["div", "div2", "div3", "heroH1", "heroP", "heroImage"],
  div2: ["div2", "div3", "heroH1", "heroP", "heroImage"],
  div3: ["div3", "heroH1", "heroP"],
  heroH1: ["heroH1"],
  heroP: ["heroP"],
  heroImage: ["heroImage"],
  _1252Px: ["_1252Px", "divtop2", "div4", "div5", "div6", "coverpng2"],
  divtop2: ["divtop2", "div4", "div5", "div6", "coverpng2"],
  div4: ["div4", "div5", "div6", "coverpng2"],
  div5: ["div5", "div6", "coverpng2"],
  div6: ["div6"],
  coverpng2: ["coverpng2"],
  _594Px: ["_594Px", "divtop3", "div7", "div8", "coverpng3", "div9"],
  divtop3: ["divtop3", "div7", "div8", "coverpng3", "div9"],
  div7: ["div7", "div8", "coverpng3", "div9"],
  div8: ["div8", "coverpng3", "div9"],
  coverpng3: ["coverpng3"],
  div9: ["div9"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  navbar: typeof Navbar;
  httpApiFetcher: typeof DataFetcher;
  _1512Px: "div";
  divtop: "div";
  div: "div";
  div2: "div";
  div3: "div";
  heroH1: "div";
  heroP: "div";
  heroImage: "div";
  _1252Px: "div";
  divtop2: "div";
  div4: "div";
  div5: "div";
  div6: "div";
  coverpng2: "div";
  _594Px: "div";
  divtop3: "div";
  div7: "div";
  div8: "div";
  coverpng3: "div";
  div9: "div";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLearnDynamic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLearnDynamic__VariantsArgs;
    args?: PlasmicLearnDynamic__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLearnDynamic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLearnDynamic__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLearnDynamic__ArgProps,
          internalVariantPropNames: PlasmicLearnDynamic__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLearnDynamic__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLearnDynamic";
  } else {
    func.displayName = `PlasmicLearnDynamic.${nodeName}`;
  }
  return func;
}

export const PlasmicLearnDynamic = Object.assign(
  // Top-level PlasmicLearnDynamic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    navbar: makeNodeComponent("navbar"),
    httpApiFetcher: makeNodeComponent("httpApiFetcher"),
    _1512Px: makeNodeComponent("_1512Px"),
    divtop: makeNodeComponent("divtop"),
    div: makeNodeComponent("div"),
    div2: makeNodeComponent("div2"),
    div3: makeNodeComponent("div3"),
    heroH1: makeNodeComponent("heroH1"),
    heroP: makeNodeComponent("heroP"),
    heroImage: makeNodeComponent("heroImage"),
    _1252Px: makeNodeComponent("_1252Px"),
    divtop2: makeNodeComponent("divtop2"),
    div4: makeNodeComponent("div4"),
    div5: makeNodeComponent("div5"),
    div6: makeNodeComponent("div6"),
    coverpng2: makeNodeComponent("coverpng2"),
    _594Px: makeNodeComponent("_594Px"),
    divtop3: makeNodeComponent("divtop3"),
    div7: makeNodeComponent("div7"),
    div8: makeNodeComponent("div8"),
    coverpng3: makeNodeComponent("coverpng3"),
    div9: makeNodeComponent("div9"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicLearnDynamic
    internalVariantProps: PlasmicLearnDynamic__VariantProps,
    internalArgProps: PlasmicLearnDynamic__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLearnDynamic;
/* prettier-ignore-end */
