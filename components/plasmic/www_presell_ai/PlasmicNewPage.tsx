// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hgYa2chxELsjCrsDiarb3T
// Component: bW6pyJavum
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: eMJ9owakU9i/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_www_presell_ai.module.css"; // plasmic-import: hgYa2chxELsjCrsDiarb3T/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: bW6pyJavum/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: D3hk28F9hn5C/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Aa_C3Sh5txeu/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: q1JO1GFRPkcbBU/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: YniqO4aFUTF3/icon

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<"div">;
  pageBanner?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  h4?: p.Flex<"h4">;
  footerTop?: p.Flex<"div">;
  container?: p.Flex<"div">;
  footerBottom?: p.Flex<"div">;
  container2?: p.Flex<"div">;
};

export interface DefaultNewPageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nOwX)}>
            <div className={classNames(projectcss.all, sty.freeBox___10N6N)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aBeoz)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xmJuN)}
                >
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__dUiHz
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__ldPTu)}
                        role={"img"}
                      />
                    </p.PlasmicLink>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gTwar)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__dmAy
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__aFtCn)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rmri3
                        )}
                      >
                        {"About Us"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__xLf)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mtauv
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___8GbVm
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cb39E
                        )}
                      >
                        {"Features"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__ecN1R)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__xjdLg
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__e3Rek)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__izMk0
                        )}
                      >
                        {"Pricing "}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__t2Z8I)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__idUy0
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__hsbh)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iTy5M
                        )}
                      >
                        {"Contact"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__swRLs)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___1KePp
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__oKQi)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dP1Nr
                        )}
                      >
                        {"Blog"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__j4TH)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2___5GqHk
                      )}
                      endIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__l3Qk1)}
                          role={"img"}
                        />
                      }
                      shape={"rounded" as const}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__oGkUb)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__krWd
                        )}
                      >
                        {"Get started"}
                      </div>
                    </Button2>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__ih8Wf)}>
            <div
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__y1U6R)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___3R8Rk)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___2Vv0R)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kw2Sy)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Blog"}
                      </h1>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hyCy3
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                        }
                      </div>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__dWj82)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___6BOsl)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/www_presell_ai/images/image.jpeg",
                        fullWidth: 1920,
                        fullHeight: 1280,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </p.Stack>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__kxXoq)}>
              <div className={classNames(projectcss.all, sty.freeBox__bs4LG)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__boQ4H)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column___9S7Ro)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.columns__jNism)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___6Kre
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__x5N3J)}
                          displayHeight={"100%" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image2.jpeg",
                            fullWidth: 509,
                            fullHeight: 340,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(projectcss.all, sty.column__wqab)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__useMp
                          )}
                        >
                          <h4
                            data-plasmic-name={"h4"}
                            data-plasmic-override={overrides.h4}
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              projectcss.__wab_text,
                              sty.h4
                            )}
                          >
                            {"Blog heading dummy"}
                          </h4>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__u3Mf
                            )}
                          >
                            {
                              "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor ..."
                            }
                          </div>

                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2__mho2A
                            )}
                            color={"blue" as const}
                            endIcon={
                              <ArrowRightsvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__se340
                                )}
                                role={"img"}
                              />
                            }
                            shape={"rounded" as const}
                            showEndIcon={true}
                            startIcon={
                              <ChecksvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xpFf7
                                )}
                                role={"img"}
                              />
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gKtqp
                              )}
                            >
                              {"Read post"}
                            </div>
                          </Button2>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__ek416)}
                  />
                </p.Stack>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__yHpu)}>
            <div
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames(projectcss.all, sty.footerTop)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div
                  className={classNames(projectcss.all, sty.columns___66Kv0)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__aA6Lv)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__oeSzz)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hjQ3Z
                      )}
                    >
                      {
                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                      }
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.column__pzXhx)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__vUev4
                      )}
                    >
                      {"Menu"}
                    </h5>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__dpw5T
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Privacy Policy"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___0Xgwx
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Terms of Service"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__qx2A
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Pricing "}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__uoGv
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__sLuZh
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Blog"}
                    </p.PlasmicLink>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column__sCxZr)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__xxRfL
                      )}
                    >
                      {"Gallery"}
                    </h5>

                    <div
                      className={classNames(projectcss.all, sty.columns__tAbnl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__sraJx
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__l5MKr)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image8.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___74EZ4
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__uEcvb)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image9.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__zg7V3
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__odMFb)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image10.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.columns__iT8TD)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___0J9Jv
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gPwPx)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image8.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(projectcss.all, sty.column__qJb)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___5PieM)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image9.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__swVna
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mkEsi)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/www_presell_ai/images/image10.jpeg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"footerBottom"}
              data-plasmic-override={overrides.footerBottom}
              className={classNames(projectcss.all, sty.footerBottom)}
            >
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jrDql
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "© Company Name. All rights reserved. This site proudly built with "
                      }
                    </React.Fragment>
                    {
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__hqiRs
                        )}
                        component={Link}
                        href={"https://www.plasmic.app/" as const}
                        platform={"nextjs"}
                      >
                        {"Plasmic"}
                      </p.PlasmicLink>
                    }
                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageBanner",
    "h1",
    "h4",
    "footerTop",
    "container",
    "footerBottom",
    "container2"
  ],
  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  h4: ["h4"],
  footerTop: ["footerTop", "container"],
  container: ["container"],
  footerBottom: ["footerBottom", "container2"],
  container2: ["container2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageBanner: "div";
  h1: "h1";
  h4: "h4";
  footerTop: "div";
  container: "div";
  footerBottom: "div";
  container2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    footerTop: makeNodeComponent("footerTop"),
    container: makeNodeComponent("container"),
    footerBottom: makeNodeComponent("footerBottom"),
    container2: makeNodeComponent("container2"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
